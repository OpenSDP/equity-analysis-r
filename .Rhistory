assess_distr$grade == i,])
} else if (j == "wrtg"){
export$wrtg_ss[out_data$grade == i] <-
match_distr(source = out_data$math_ss[export$grade == i],
target = assess_distr[assess_distr$subject == j &
assess_distr$grade == i,])
}
# Where is year?
## Assign variable names
names(export) <- c("sid", "school_code", "grade_level", "year", "male",
"race_ethnicity",
"eco_dis", "title_1", "migrant", "lep", "iep", "rdg_ss",
"math_ss", "wrtg_ss", "composition")
# Final tweaks for Texas
export %<>% filter(grade_level %in% c("3", "4", "5", "6", "7", "8"))
# 9 digit sid
export$sid <- stringr::str_pad(as.numeric(export$sid), 9, pad = "0")
# 9 digit school_code
export$school_code <- stringr::str_pad(as.numeric(export$school_code),
9, pad = "0")
# Race = first letter
export$race_ethnicity %<>% substr(as.character(.), 1, 1)
# sex = first letter
export$race_ethnicity %<>% substr(as.character(.), 1, 1)
# lep = 1/0
export$lep %<>% as.numeric
# econ_dis = 1/0
export$eco_dis %<>% as.numeric
# Race = first letter
export$race_ethnicity %<>% as.character %>% substr(1, 1)
# sex = first letter
export$race_ethnicity %<>% as.character %>% substr(1, 1)
# lep = 1/0
export$lep %<>% as.numeric
# econ_dis = 1/0
export$eco_dis %<>% as.numeric
str(export)
save(export, file = "data/synth_texas.rda")
write.csv(export, file = "data/synth_texas.csv",
row.names = FALSE)
summary(export)
# sex = first letter
export$male %<>% as.character %>% substr(1, 1)
summary(export)
save(export, file = "data/synth_texas.rda")
write.csv(export, file = "data/synth_texas.csv",
row.names = FALSE)
###############################################################################
# Generate Synthetic Data In Texas Assessment Format
# Date: 06/08/2018
# Author: Jared E. Knowles
# Prepared for OpenSDP
################################################################################
## Identify the data structure needed
## File - student grade 3-8
## grade_level
## school_code
## sid
## male
## race_ethnicity
## eco_dis
## title_1
## migrant
## lep
## iep
## rdg_ss
## math_ss
## wrtg_ss
## composition
## wrtg_perc
## Install the synthesizer to generate the data
## This step is optional if you already have it installed
## Current package depends on this fork of the simglm package
## Uncomment to use
#devtools::install_github("jknowles/simglm")
## Install the OpenSDP data synthesizer
## Uncomment to use
# devtools::install_github("OpenSDP/OpenSDPsynthR")
##
library(OpenSDPsynthR)
set.seed(0525212) # set the seed
library(magrittr)
library(stringr)
# The synthesizer needs some input paramaters
# As it is the defaults are not sufficient to give realistic assessment data
# These change those defaults to make the scores less deterministic
assess_adj <- sim_control()$assessment_adjustment
# Make scores spread out more
assess_adj$perturb_base <-
function (x, sd)
{
mean_shift <- rnorm(1, sd = 3)
y <- x + rnorm(1, mean_shift, sd * 0.8)
return(y)
}
# Get defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance
assess_sim_par$error_var <- 15
# Increase coefficient effects
assess_sim_par$fixed_param <- assess_sim_par$fixed_param * 10
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- 10
# Set group level variances
assess_sim_par$random_param$random_var <- c(0.4, 0.75)
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(100, 420)
# Conduct the simulation
stu_pop <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par))
# Build analysis file from the datasets in the list produced by simpop
#
out_data <- dplyr::left_join(stu_pop$stu_assess, stu_pop$stu_year)
#
out_data <- out_data %>% select(-exit_type, -cohort_grad_year, - cohort_year, -enrollment_status,
-grade_enrolled, -grade_advance, -ndays_attend,
-ndays_possible)
out_data <- left_join(out_data, stu_pop$demog_master %>%
select(sid, Sex, Race))
# Conver back to dataframe
out_data <- as.data.frame(out_data)
# Get sample model output to check relationships among variables
summary(lm(math_ss~rdg_ss + grade + frpl + ell + iep + gifted, data = out_data))
# Perturb by student to give student scores dependence on an unobserved student
# talent - too deterministic still
out_data <- out_data %>% group_by(sid) %>%
mutate(talent = rnorm(1, 10, 20),
coef_t = rnorm(1, 10, 0.5),
coef_a = rnorm(1, 5, 2),
coef_z = rnorm(1, 1.5, 1)) %>%
mutate(coef_tb = coef_t + rnorm(1, 0, 1)) %>%
ungroup %>%
mutate(rdg_ss = rdg_ss + coef_t*talent + coef_a * age + 3*age + rnorm(1, 25, 10),
math_ss = coef_z*rdg_ss + coef_tb*talent + 3*age + coef_a*age + rnorm(1, 25, 10)) %>%
select(-coef_t, -coef_tb, -coef_z, -coef_a,- talent) %>% ungroup %>% as.data.frame
# Fill in missing variables
out_data$migrant <- NA
out_data$wrtg_ss <- NA
out_data$composition <- NA
out_data$title_1 <- NA
# Define an export
export <- out_data %>%
select(sid, schid, grade, year, Sex, Race, frpl, title_1,
migrant, ell, iep, rdg_ss, math_ss, wrtg_ss, composition)
## Reshape Assessment scores to map to TASS
assess_distr <- read.csv("man/texas_score_distributions.csv",
stringsAsFactors = FALSE)
match_distr <- function(source, target){
# source is a numeric vector that can be converted to percentiles
# target is the assess_distr data from Texas above that can be
# subset by subject and grade
out <- ntile(source, n = 100) # generate percentiles
mod1 <- loess(scale_score ~ perc, data = target) # map percentiles to scores
newdata <- data.frame("perc" = out) # use the new data to make predictions
yhat <- predict(mod1, newdata = newdata) # predict from the loess model
min_score <- min(target$scale_score) # find LOSS
max_score <- max(target$scale_score) # find HOSS
yhat[yhat > max_score] <- max_score # truncate
yhat[yhat < min_score] <- min_score
return(yhat)
}
###################################################################
# Uncomment code to step through the match_distr function above
####################################################################
# plotdf <- assess_distr[assess_distr$grade == 3 &
#                          assess_distr$subject == "math", ]
# ggplot(plotdf, aes(x = scale_score, y = cum_perc)) +
#   geom_bar(stat="identity", fill = "white", color = "black") + theme_bw() +
#   geom_smooth()
# mod1 <- loess(scale_score ~ perc, data = plotdf)
# source <- stu_pop$stu_assess %>% filter(grade == 3) %>% ungroup %>%
#   select(math_ss) %>% pull
# zz <- match_distr(source = source, target = plotdf)
for(j in c("math", "rdg")){
for(i in c(3:8)){
if(j == "math"){
export$math_ss[out_data$grade == i] <-
match_distr(source = out_data$math_ss[export$grade == i],
target = assess_distr[assess_distr$subject == j &
assess_distr$grade == i,])
} else if (j == "rdg"){
export$rdg_ss[out_data$grade == i] <-
match_distr(source = out_data$math_ss[export$grade == i],
target = assess_distr[assess_distr$subject == j &
assess_distr$grade == i,])
} else if (j == "wrtg"){
export$wrtg_ss[out_data$grade == i] <-
match_distr(source = out_data$math_ss[export$grade == i],
target = assess_distr[assess_distr$subject == j &
assess_distr$grade == i,])
}
# Where is year?
## Assign variable names
names(export) <- c("sid", "school_code", "grade_level", "year", "male",
"race_ethnicity",
"eco_dis", "title_1", "migrant", "lep", "iep", "rdg_ss",
"math_ss", "wrtg_ss", "composition")
# Final tweaks for Texas
export %<>% filter(grade_level %in% c("3", "4", "5", "6", "7", "8"))
# 9 digit sid
export$sid <- stringr::str_pad(as.numeric(export$sid), 9, pad = "0")
# 9 digit school_code
export$school_code <- stringr::str_pad(as.numeric(export$school_code),
9, pad = "0")
# Race = first letter
export$race_ethnicity %<>% as.character %>% substr(1, 1)
# sex = first letter
export$male %<>% as.character %>% substr(1, 1)
# lep = 1/0
export$lep %<>% as.numeric
# econ_dis = 1/0
export$eco_dis %<>% as.numeric
# Save
save(export, file = "data/synth_texas.rda")
write.csv(export, file = "data/synth_texas.csv",
row.names = FALSE)
## Tests to evaluate the synthetic data
# summary({m1 <- lm(math_ss ~ rdg_ss, data = out_data)})
# summary({m2 <- lm(rdg_ss ~ math_ss, data = out_data)})
#
# m1_b <- lm(math_ss_b ~ rdg_ss_b, data = out_data)
# m1 <- lm(math_ss ~ . , data = out_data[, -1])
usethis::use_git_ignore()
usethis::use_git_ignore(".Rproj.user")
library(tidyverse) # main suite of R packages to ease data analysis
library(magrittr) # allows for some easier pipelines of data
library(tidyr) #
library(plyr)
library(dplyr)
library(FSA)
install.packages("FSA")
library(tidyverse) # main suite of R packages to ease data analysis
library(magrittr) # allows for some easier pipelines of data
library(tidyr) #
library(plyr)
library(dplyr)
library(FSA)
library(ggplot2) # to plot
library(scales) # to format
library(grid)
library(gridExtra) # to plot
# Read in some R functions that are convenience wrappers
source("../R/functions.R")
#pkgTest("devtools")
#pkgTest("OpenSDPsynthR")
# // Step 1: Read in csv file of our dataset, naming it "texas.data"
texas.data <- read.csv("../data/synth_texas.csv")
# // Step 2: View data file
View(texas.data)
# // Step 3: Create a vector of labels for feature names in our dataset
#These labels will appear in visualizations and tables
labels <- c("Grade","School ID","Student ID","Gender", "Race-Ethnicity",
"Econ Disadvantage Status","Title 1 Status","Migrancy Status",
"LEP Status","Spec Ed Enrolled","Reading Score",
"Math Score","Writing Score","Writing Comp Score")
#Pairs labels with feature names from file
names(labels) <- c("grade_level","school_code","sid","male","race_ethnicity",
"eco_dis","title_1","migrant",
"lep","iep","rdg_ss",
"math_ss","wrtg_ss","composition")
# // Step 1: Set which tested grade levels to analyze (5th and 8th here)
grades <- c("5","8")
# // Step 2: Set which tested subjects to analyze (math and reading here)
subjects <- c("rdg_ss","math_ss")
# // Step 3: Calculate summary stats for each grade level
# Loop over grade level
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
print(paste("grade level: ",grade))
a <- summary(data[,subjects]) #Summary stats table for grade
colnames(a) <- labels[subjects]  #Label table
print(a) #Print summary table
} #End loop over grade level
# // Visualization 1: Box plots
#Loop over tested subjects
for(subject in subjects){
data = texas.data[texas.data$grade_level == grades,] #Isolates 5th and 8th graders
#Set variables and parameters for our boxplot
p <- ggplot(data, aes(x=as.factor(grade_level), y=data[,subject])) +
geom_boxplot() +
ggtitle(paste(labels[subject], ", by Grade Level")) +
scale_y_continuous(name=labels[subject]) +
scale_x_discrete(name="Grade Level")
print(p)
} #End loop over tested subjects
# // Comparison 2: Histograms of scores for eco_dis students
#Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
#Loop over tested subject
for(subject in subjects){
#Set variables and parameters for our boxplot
p <- ggplot(data, aes(x=data[,subject])) +
ggtitle(paste("Grade: ",grade,", ",labels[subject], " (all students)"))+
geom_histogram(alpha = 0.5, binwidth = 50, fill = "dodgerblue", color = "dodgerblue") +
scale_x_continuous(name=paste(labels[subject]))
print(p)
} #End loop over tested subject
} #End loop over grade level
# // Step 1: Initialize Demographics to Analyze
#Vector with features we want to analyze: Econ Disadvantage, Race Ethnicity, Gender
dems <- c("eco_dis","race_ethnicity","male")
# // Comparisons: Generating summary stats for Eco Dis, Race Ethnicity, and Gender
#Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
#Loop over tested subject
for(subject in subjects){
print(paste("Grade: ",grade,", ",labels[subject])) #Print subject and grade level
#Loop over demographic features
for(dem in dems){
a<-Summarize(data[,subject] ~ data[,dem]) #Makes comparison table
colnames(a)[1] <- labels[dem] #Labels comparison table
print(a) #Prints comparison table
} #End loop over demogrpahic features
} #End loop over tested subject
} #End loop over grade level
# // Step 1: Initialize a set of distinguishable colors for graphics
colors <- c("red","dodgerblue3","green","coral","violet","burlywood2","grey68")
# // Comparison: Box plots and histograms of scores for Econ Disadvantage, Race, and Gender
#Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
#Loop over tested subject
for(subject in subjects){
#Loop over demographic features
for(dem in dems){
#Set variables and parameters for our boxplot
bp <- ggplot(data, aes(x=as.factor(data[,dem]), y=data[,subject])) +
geom_boxplot() +
ggtitle(paste("Grade: ",grade,", ", labels[subject],", by ",labels[dem])) +
scale_y_continuous(name=labels[subject]) +
scale_x_discrete(name=labels[dem])
print(bp) #Print box plot
#Set variables and parameters for our histogram
h <- ggplot(data, aes(x=data[,subject], fill = as.factor(data[,dem]))) +
ggtitle(paste("Grade: ",grade,", ", labels[subject],", by ",labels[dem]))+
geom_histogram(alpha = 0.5, binwidth = 50) +
scale_fill_manual(name=labels[dem],
values=colors[1:length(levels(as.factor(data[,dem])))])+
scale_x_continuous(name=paste(labels[subject], ", Grade", grade))
print(h) #Print histogram
}#End loop over demographic features
} #End loop over tested subject
} #End loop over grade level
# // Step 1: Initialize Demographics to Analyze
#Vector with features we want to analyze: Special Education, Migrancy, and LEP Status
##NOTE MIGRANCY DATA JUST 'NAs' SO NOT INCLUDED YET IN ANALYSIS##
dems <- c("iep","lep")
# // Comparisons: Generating summary stats for Spec Ed, Migrancy, and LEP
#Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
#Loop over tested subject
for(subject in subjects){
print(paste("Grade: ",grade,", ",labels[subject])) #Print subject and grade level
#Loop over demographic features
for(dem in dems){
a<-Summarize(data[,subject] ~ data[,dem]) #Makes comparison table
colnames(a)[1] <- labels[dem] #Labels comparison table
print(a) #Prints comparison table
} #End loop over demogrpahic features
} #End loop over tested subject
} #End loop over grade level
# // Comparison: Box plots and histograms of scores for Special Education, Migrancy, and LEP Status
#Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
#Loop over tested subject
for(subject in subjects){
#Loop over demographic features
for(dem in dems){
#Set variables and parameters for our boxplot
bp <- ggplot(data, aes(x=as.factor(data[,dem]), y=data[,subject])) +
geom_boxplot() +
ggtitle(paste("Grade: ",grade,", ", labels[subject],", by ",labels[dem])) +
scale_y_continuous(name=labels[subject]) +
scale_x_discrete(name=labels[dem])
print(bp) #Print box plot
#Set variables and parameters for our histogram
h <- ggplot(data, aes(x=data[,subject], fill = as.factor(data[,dem]))) +
ggtitle(paste("Grade: ",grade,", ", labels[subject],", by ",labels[dem]))+
geom_histogram(alpha = 0.5, binwidth = 50) +
scale_fill_manual(name=labels[dem],
values=colors[1:length(levels(as.factor(data[,dem])))])+
scale_x_continuous(name=paste(labels[subject], ", Grade", grade))
print(h) #Print histogram
}#End loop over demographic features
} #End loop over tested subject
} #End loop over grade level
# // Analysis 1: Comparing within groups--Gender gaps within race
#Set the feature you would like to compare within
group.by <- "race_ethnicity"
#Set the feature you are comparing
compare.by <- "male"
# Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
res <- levels(as.factor(data[,group.by])) #All the different race-ethnicities we will explore
#Loop over tested subject
for(subject in subjects){
print(paste("Grade: ",grade,", ",labels[subject])) #Print subject and grade level
#Loop over race-ethnicities
for(re in res){
#Isolates observations from particular race-ethnicity
data.res <- data[data[,group.by]==re,]
#Makes comparison table across genders within each race-ethnicity group
a<-Summarize(data.res[,subject] ~ data.res[,compare.by]) #Makes comparison table
colnames(a)[1] <- labels[compare.by]
print(paste(labels[group.by],": ",re))
print(a) #Prints comparison table
} #End loop over race-ethnicities
cat("\n\n") #spacer line
} #End loop over tested subject
} #End loop over grade level
# // Analysis 2: Comparing proportions enrolled in a program
#This analysis will compare what percentage of each econ_dis category has an IEP
#First will look at proportions among all grade levels
cont.table <- with(texas.data, table(eco_dis,iep))
cont.table #Frequency table
round(prop.table(cont.table,1)*100) #Proportion contingency table
#Now we will look at proportions within grade levels
#Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
print(paste("Grade: ",grade)) #Print grade level
cont.table <- with(data, table(eco_dis,iep))
print(cont.table) #Frequency table
print(round(prop.table(cont.table,1)*100)) #Proportion contingency table
} #End loop over grade level
# // Analysis 3: Comparing within groups--Special Ed gaps within Socioeconomic levels
#Note: same code as analysis 1, just with different set features in first lines
#Set the feature you would like to compare within
group.by <- "eco_dis"
#Set the feature you are comparing
compare.by <- "iep"
# Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
res <- levels(as.factor(data[,group.by])) #All the different levels of economic disadvantage
#Loop over tested subject
for(subject in subjects){
print(paste("Grade: ",grade,", ",labels[subject])) #Print subject and grade level
#Loop over levels of econ-dis
for(re in res){
#Isolates observations from particular econ-dis level
data.res <- data[data[,group.by]==re,]
#Makes comparison table for special ed enrollemnt within econ-dis level
a<-Summarize(data.res[,subject] ~ data.res[,compare.by]) #Makes comparison table
colnames(a)[1] <- labels[compare.by]
print(paste(labels[group.by],": ",re))
print(a) #Prints comparison table
} #End loop over econ-dis level
cat("\n\n") #spacer line
} #End loop over tested subject
} #End loop over grade level
# // Comparison: Box plots and histograms of scores comparing gender within race-ethnicity
#Set the feature you would like to compare within
group.by <- "race_ethnicity"
#Set the feature you are comparing
compare.by <- "male"
#Loop over grade levels
for(grade in grades){
data = texas.data[texas.data$grade_level == grade,] #Isolates grade level
res <- levels(as.factor(data[,group.by])) #All the different race-ethnicities we will explore
#Loop over tested subject
for(subject in subjects){
#Loop over demographic features
for(re in res){
#Isolates observations from particular race-ethnicity
data.res <- data[data[,group.by]==re,]
#Set variables and parameters for our boxplot
bp <- ggplot(data.res, aes(x=as.factor(data.res[,compare.by]), y=data.res[,subject])) +
geom_boxplot() +
ggtitle(paste("Grade: ",grade,", ", labels[subject],", ",re)) +
scale_y_continuous(name=labels[subject]) +
scale_x_discrete(name=labels[compare.by])
print(bp) #Print box plot
#Set variables and parameters for our histogram
h <- ggplot(data.res, aes(x=data.res[,subject], fill = as.factor(data.res[,compare.by]))) +
ggtitle(paste("Grade: ",grade,", ", labels[subject],", ",re))+
geom_histogram(alpha = 0.5, binwidth = 50) +
scale_fill_manual(name=labels[compare.by],
values=colors[1:length(levels(as.factor(data.res[,compare.by])))])+
scale_x_continuous(name=paste(labels[subject], ", Grade", grade))
print(h) #Print histogram
}#End loop over race-ethnicity
} #End loop over tested subject
} #End loop over grade level
gap.test(data, grade = 5, outcome = "math_ss")
gap.test
texas.datar<-read.csv("../data/synth_texas.csv")
standard.devsr <- read.csv("../data/sd_table.csv")
#Function test
gap.test(df=texas.datar,
grade="grade_level",
outcome="rdg_ss",
features=c('eco_dis','lep','iep','race_ethnicity','male'),
sds=standard.devsr)
getwd()
setwd("C:/Users/Jared/GitHub/opensdp_equity_report_template/R")
getwd()
texas.datar<-read.csv("../data/synth_texas.csv")
standard.devsr <- read.csv("../data/sd_table.csv")
#Function test
gap.test(df=texas.datar,
grade="grade_level",
outcome="rdg_ss",
features=c('eco_dis','lep','iep','race_ethnicity','male'),
sds=standard.devsr)
